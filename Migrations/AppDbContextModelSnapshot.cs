// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace celebrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a0b2fd5f-1f2b-45cc-b046-3f0664b9c7ac",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "71995708-4c32-4300-b85a-75326a4a9ea0",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DiscountEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DiscountStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductName");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = "f4aef094-93b8-429f-8408-5356aec396bc",
                            DiscountEnd = new DateTime(2025, 6, 1, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4880),
                            DiscountStart = new DateTime(2025, 5, 27, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4869),
                            Price = 25.99m,
                            ProductImage = "mouse.jpg",
                            ProductName = "Wireless Mouse",
                            Slug = "wireless-mouse"
                        },
                        new
                        {
                            ProductId = "2d9bf373-6aab-4325-b317-d2ddeee9a21e",
                            DiscountEnd = new DateTime(2025, 6, 2, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4902),
                            DiscountStart = new DateTime(2025, 5, 26, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4901),
                            Price = 79.99m,
                            ProductImage = "keyboard.jpg",
                            ProductName = "Mechanical Keyboard",
                            Slug = "mechanical-keyboard"
                        },
                        new
                        {
                            ProductId = "a0e124e7-2d33-48e5-9038-63466f0eba8b",
                            DiscountEnd = new DateTime(2025, 5, 31, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4909),
                            DiscountStart = new DateTime(2025, 5, 28, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4908),
                            Price = 199.99m,
                            ProductImage = "monitor27.jpg",
                            ProductName = "HD Monitor 27\"",
                            Slug = "hd-monitor-27"
                        },
                        new
                        {
                            ProductId = "559fdf13-02ff-4079-bfa0-5f79a15461f8",
                            DiscountEnd = new DateTime(2025, 6, 5, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4916),
                            DiscountStart = new DateTime(2025, 5, 27, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4915),
                            Price = 139.50m,
                            ProductImage = "chair.jpg",
                            ProductName = "Gaming Chair",
                            Slug = "gaming-chair"
                        },
                        new
                        {
                            ProductId = "b93fcc2f-4dd4-49c6-91e7-6d2fb022d3f8",
                            DiscountEnd = new DateTime(2025, 5, 30, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4922),
                            DiscountStart = new DateTime(2025, 5, 29, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4921),
                            Price = 45.00m,
                            ProductImage = "hub.jpg",
                            ProductName = "USB-C Hub (6-in-1)",
                            Slug = "usb-c-hub-6-in-1"
                        },
                        new
                        {
                            ProductId = "6e01ed92-f236-4bdf-919b-0c1a767495a1",
                            DiscountEnd = new DateTime(2025, 6, 9, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4928),
                            DiscountStart = new DateTime(2025, 5, 26, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4927),
                            Price = 59.99m,
                            ProductImage = "webcam.jpg",
                            ProductName = "1080p Webcam Pro",
                            Slug = "webcam-pro-1080p"
                        },
                        new
                        {
                            ProductId = "fecd4431-542f-4bc4-8dfd-5c132f706ab1",
                            DiscountEnd = new DateTime(2025, 6, 1, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4934),
                            DiscountStart = new DateTime(2025, 5, 31, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4933),
                            Price = 89.95m,
                            ProductImage = "speaker.jpg",
                            ProductName = "Bluetooth Speaker",
                            Slug = "bluetooth-speaker"
                        },
                        new
                        {
                            ProductId = "0b4bf650-cd4a-4579-937d-e15931b32c03",
                            DiscountEnd = new DateTime(2025, 6, 6, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4948),
                            DiscountStart = new DateTime(2025, 6, 5, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4947),
                            Price = 129.99m,
                            ProductImage = "ssd.jpg",
                            ProductName = "External SSD 1TB",
                            Slug = "external-ssd-1tb"
                        },
                        new
                        {
                            ProductId = "2e04abcb-6940-4869-bc2b-8403180f1b1d",
                            DiscountEnd = new DateTime(2025, 5, 31, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4954),
                            DiscountStart = new DateTime(2025, 5, 27, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4953),
                            Price = 159.99m,
                            ProductImage = "headphones.jpg",
                            ProductName = "Noise-Cancelling Headphones",
                            Slug = "nc-headphones"
                        },
                        new
                        {
                            ProductId = "b2d19f24-0f23-43ea-bc59-01de84774bff",
                            DiscountEnd = new DateTime(2025, 6, 25, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4961),
                            DiscountStart = new DateTime(2025, 5, 26, 10, 23, 34, 151, DateTimeKind.Utc).AddTicks(4960),
                            Price = 799.00m,
                            ProductImage = "tv.jpg",
                            ProductName = "4K Ultra HD TV",
                            Slug = "4k-ultra-hd-tv"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Cart", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
