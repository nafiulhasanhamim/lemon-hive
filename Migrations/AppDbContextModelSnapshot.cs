// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace celebrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "825e36a8-572f-40b3-b3af-b84f5e281c97",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "dc66b33c-aef2-4a89-acae-b27b193a17bf",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DiscountEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DiscountStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductName");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = "5dcba1b3-031f-4062-824c-406dedd44305",
                            DiscountEnd = new DateTime(2025, 6, 3, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8010),
                            DiscountStart = new DateTime(2025, 5, 29, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(7985),
                            Price = 25.99m,
                            ProductImage = "mouse.jpg",
                            ProductName = "Wireless Mouse",
                            Slug = "wireless-mouse"
                        },
                        new
                        {
                            ProductId = "fea63d5f-56a3-4187-87ea-3a950b1863c8",
                            DiscountEnd = new DateTime(2025, 6, 4, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8043),
                            DiscountStart = new DateTime(2025, 5, 28, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8043),
                            Price = 79.99m,
                            ProductImage = "keyboard.jpg",
                            ProductName = "Mechanical Keyboard",
                            Slug = "mechanical-keyboard"
                        },
                        new
                        {
                            ProductId = "991c95a5-7467-4ed2-a339-c2db587d3fea",
                            DiscountEnd = new DateTime(2025, 6, 2, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8054),
                            DiscountStart = new DateTime(2025, 5, 30, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8052),
                            Price = 199.99m,
                            ProductImage = "monitor27.jpg",
                            ProductName = "HD Monitor 27\"",
                            Slug = "hd-monitor-27"
                        },
                        new
                        {
                            ProductId = "0588bfc3-de51-448e-8f51-9ee105f40367",
                            DiscountEnd = new DateTime(2025, 6, 7, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8063),
                            DiscountStart = new DateTime(2025, 5, 29, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8061),
                            Price = 139.50m,
                            ProductImage = "chair.jpg",
                            ProductName = "Gaming Chair",
                            Slug = "gaming-chair"
                        },
                        new
                        {
                            ProductId = "f0dda949-4c60-4d3b-8e16-5e0c1366c7ba",
                            DiscountEnd = new DateTime(2025, 6, 1, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8071),
                            DiscountStart = new DateTime(2025, 5, 31, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8069),
                            Price = 45.00m,
                            ProductImage = "hub.jpg",
                            ProductName = "USB-C Hub (6-in-1)",
                            Slug = "usb-c-hub-6-in-1"
                        },
                        new
                        {
                            ProductId = "96a1416e-ea60-45f0-964b-72674f39c20b",
                            DiscountEnd = new DateTime(2025, 6, 11, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8104),
                            DiscountStart = new DateTime(2025, 5, 28, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8103),
                            Price = 59.99m,
                            ProductImage = "webcam.jpg",
                            ProductName = "1080p Webcam Pro",
                            Slug = "webcam-pro-1080p"
                        },
                        new
                        {
                            ProductId = "1b2cbaf1-18f9-448b-bce9-2abafff93147",
                            DiscountEnd = new DateTime(2025, 6, 3, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8112),
                            DiscountStart = new DateTime(2025, 6, 2, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8111),
                            Price = 89.95m,
                            ProductImage = "speaker.jpg",
                            ProductName = "Bluetooth Speaker",
                            Slug = "bluetooth-speaker"
                        },
                        new
                        {
                            ProductId = "5e9162b3-961d-4f04-89ac-a048693a04b9",
                            DiscountEnd = new DateTime(2025, 6, 8, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8129),
                            DiscountStart = new DateTime(2025, 6, 7, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8128),
                            Price = 129.99m,
                            ProductImage = "ssd.jpg",
                            ProductName = "External SSD 1TB",
                            Slug = "external-ssd-1tb"
                        },
                        new
                        {
                            ProductId = "6b7ac32a-77e4-4957-b158-117237247bf8",
                            DiscountEnd = new DateTime(2025, 6, 2, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8137),
                            DiscountStart = new DateTime(2025, 5, 29, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8136),
                            Price = 159.99m,
                            ProductImage = "headphones.jpg",
                            ProductName = "Noise-Cancelling Headphones",
                            Slug = "nc-headphones"
                        },
                        new
                        {
                            ProductId = "45304c93-db73-4816-90f9-e9b89bba0701",
                            DiscountEnd = new DateTime(2025, 6, 27, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8145),
                            DiscountStart = new DateTime(2025, 5, 28, 7, 8, 38, 363, DateTimeKind.Utc).AddTicks(8144),
                            Price = 799.00m,
                            ProductImage = "tv.jpg",
                            ProductName = "4K Ultra HD TV",
                            Slug = "4k-ultra-hd-tv"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Cart", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
